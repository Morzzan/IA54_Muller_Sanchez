/** 
 * 
 */
package agents

import behaviors.InformationBehavior
import behaviors.SearchBehavior
import com.vividsolutions.jts.geom.Geometry
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import model.Base
import model.DiscoveredEvent
import model.EndEvent
import model.RegisterEvent
import model.RelayedEvent
import skillscapacities.MoveCapacity
import skillscapacities.MoveSkill
import model.HelpMe
import model.SurvivorSaved

/** 
 * @author morzzan
 * 
 */
agent UAVAgent {
	uses Logging, DefaultContextInteractions, Lifecycle, Behaviors, MoveCapacity
	var nb : int
	var base : Base
	var unexplored : Geometry
	val searchBehavior = new SearchBehavior(this)
	val informationBehavior = new InformationBehavior(this)
	
	
	on Initialize {
		nb = occurrence.parameters.get(0) as Integer
		base = occurrence.parameters.get(1) as Base
		setSkill(new MoveSkill, MoveCapacity)
		unexplored = occurrence.parameters.get(2) as Geometry		
		loggingName = " Drone " + nb.toString		
		registerBehavior(searchBehavior,unexplored)
		info("The UAV was started.")
		emit(new RegisterEvent(nb, typeof(UAVAgent)))
	}

	on EndEvent{	
		killMe
	} 
	
	on DiscoveredEvent {
		registerBehavior(informationBehavior, occurrence.survivors, base)
	}
	
	on RelayedEvent{
		registerBehavior(searchBehavior, unexplored)
		//emit(currentPercept)[it.UUID == this.ID]
	}
}

