package tools

import com.vividsolutions.jts.geom.Coordinate
import java.util.Random
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * 
 */
 


/** 
 * @author morzzan
 * My implementation of a 3D Vector
 */
class Vector3D {
	@Accessors(PUBLIC_GETTER)
	var x : double
	@Accessors(PUBLIC_GETTER)
	var y : double
	@Accessors(PUBLIC_GETTER)
	var z : double
	
	new{
	
	}
	
	new(x : double ,y : double, z : double){
		this.x = x
		this.y = y
		this.z = z
	}
	new(v: Vector3D){
		x=v.x
		y=v.y
		z=v.z
	}
	new(c : Coordinate){
		this.x=c.x
		this.y=c.y
		this.z=0
	}
	
	/**
	 * @return The sum of this vector and the one in parameter
	 */
	def add(v : Vector3D){
		return new Vector3D(x+v.x,y+v.y,z+v.z)
	}

	/** 
	 * @return The subtraction of this vector and the one in parameter
	 */
	def substract(v : Vector3D) {
		return new Vector3D(x - v.x, y - v.y, z - v.z)
	}

	/** 
	 * @return The norm (aka the length) of this vector
	 */
	def norm(){
		return Math.sqrt(x*x+y*y+z*z)
	}

	/** 
	 * @return A conversion of this 3D vector to a JTS Coordinate(2Dvector)
	 */
	def toPlaneCoordinate{
		return new Coordinate(x,y)
	}

	/** 
	 * @return A vector with the same direction but with a length of 1
	 */
	def normalize{
		return times(1/norm)
	}

	/** 
	 * @return A vector with the same direction but with a length of 1
	 */
	def unitarize{
		return new Vector3D(x/norm,y/norm,z/norm)
	}

	/** 
	 * @return the multiplication of this vector by a scalar k
	 */
	def times(k : double){
		return new Vector3D(x*k,y*k,z*k)
	}
	def toString : String {
		return "("+x as int+","+y as int+","+z as int+")"
	}

	/** 
	 * @return A created random 3D vector
	 */
	static def randomDirection(){
		var v = new Vector3D
		val rd = new Random
		v.x = rd.nextDouble-0.5
		v.y = rd.nextDouble -0.5
		v.z = 0 
		return v.unitarize
	}
}
