/** 
 * 
 */
package behaviors

import Agents.SurvivorAgent
import com.vividsolutions.jts.geom.Geometry
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.concurrent.Semaphore
import view.Fx3DView
import io.sarl.core.Initialize
import model.Environment
import model.GoThatWay
import model.StartEvent
import model.UAVAgent
import model.RegisterEvent
import model.SurvivorSaved
import model.PerceptEvent
import model.EndEvent
import model.SurvivorPerceptEvent

/** 
 * @author morzzan
 * 
 */
 abstract behavior ManagingBehavior {
	protected var step = 0
	protected val env = new Environment
	protected var nbuavs : int
	protected var nbSurvivors : int
	protected val actions = <GoThatWay>newArrayList
	protected val sem = new Semaphore(1)
	protected var fx : Fx3DView

	uses Logging, DefaultContextInteractions, Lifecycle, Schedules

	on Initialize{
		nbuavs = occurrence.parameters.get(0) as Integer
		nbSurvivors = occurrence.parameters.get(1) as Integer
	}

	on StartEvent {
		fx = occurrence.fx
		info("Received Start event")
		for (var i = 0; i < nbSurvivors; i++) {
			spawn(typeof(SurvivorAgent), i)
		}
		for (var i = 0; i < nbuavs; i++) {
			spawn(typeof(UAVAgent), i, env.base, env.zone as Geometry)
		}
	}

	on RegisterEvent {
		if (occurrence.agentType == typeof(UAVAgent)) {
			env.makeUAVBody(occurrence.source.UUID, occurrence.nb)
		} else {
			env.makeSurvivorBody(occurrence.source.UUID, occurrence.nb)
		}
		if (env.uavs.size >= nbuavs && env.survivors.size >= nbSurvivors) {
			sendPercepts
		}
	}

	on SurvivorSaved {
		env.saveSurvivor(occurrence.survivorID)
	}

	on Destroy {
		info("It took " + step + " steps to locate all the survivors in the zone")
		emit(new EndEvent)
	}

	def sendPercepts {
		info("step "+ step)
		for (uav : env.uavs.values) {
			emit(new PerceptEvent(uav.pos, uav.speed, env.getNeighbors(uav), env.isOnZone(uav)))[it.UUID == uav.id]
		}
		for (survivor : env.survivors.values) {
			var seenUAVs = env.getSeenUAVs(survivor)
			if(!seenUAVs.empty) emit(new SurvivorPerceptEvent(seenUAVs, survivor.pos))[it.UUID == survivor.id]
		}
	}

	abstract def runstep
}
