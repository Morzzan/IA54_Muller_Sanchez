/** 
 * 
 */
package view

import io.sarl.javafx.FxApplication
import io.sarl.lang.core.EventSpace
import io.sarl.util.OpenEventSpace
import javafx.fxml.FXMLLoader
import javafx.scene.Camera
import javafx.scene.Group
import javafx.scene.PerspectiveCamera
import javafx.scene.Scene
import javafx.scene.paint.Color
import javafx.scene.paint.PhongMaterial
import javafx.scene.shape.Box
import javafx.scene.shape.Circle
import javafx.scene.shape.DrawMode
import javafx.scene.shape.Shape3D
import javafx.scene.shape.Sphere
import javafx.stage.Stage
import org.eclipse.xtend.lib.annotations.Accessors
import tools.StartEvent
import tools.Utils
import uav.UAVBody
import survivor.Survivor
import base.Base

/** 
 * @author morzzan
 * GUI class
 * Displays the current state of the simulation
 */
class Fx3DView extends FxApplication {
	static public var sp : EventSpace
	val sceneX = 1200
	val sceneY = 600
	var controller = new MyController
	var grp = new Group()
	var scene : Scene
	var camera : Camera
	var base : Shape3D
	@Accessors(PUBLIC_GETTER)
	var drones = <Shape3D>newArrayList
	@Accessors(PUBLIC_GETTER)
	var survivors = <Shape3D>newArrayList
	
	protected def doApplicationStart(stage : Stage) : FXMLLoader {
		var nbdrones = Integer.parseInt(parameters.raw.get(0))
		var nbSurvivors = Integer.parseInt(parameters.raw.get(1))
		controller.UISpace = Fx3DView.sp as OpenEventSpace	
		makeBase	
		makeDrones(nbdrones)
		makeSurvivors(nbSurvivors)	
		setCamera
		

		// Setting title to the Stage
		stage.setTitle("See the drones");

		// Adding scene to the stage
		stage.setScene(scene);

		//Displaying the contents of the stage 
		stage.show();
		controller.emitToAgents(new StartEvent(this))
      	return null
	}
	def updateObjects(uavs : Iterable<UAVBody>, survivors : Iterable<Survivor>,base : Base) {
		for (uav : uavs) {
			drones.get(uav.nb).translateX = uav.pos.x
			drones.get(uav.nb).translateY = uav.pos.y
			drones.get(uav.nb).translateZ = uav.pos.z
		}
		for (survivor : survivors) {
			var box = this.survivors.get(survivor.nb)
			box.translateX = survivor.pos.x
			box.translateY = survivor.pos.y
			box.translateZ = survivor.pos.z
			if (survivor.rescued) {
				var gray = new PhongMaterial();
				gray.setSpecularColor(Color.GRAY);
				gray.setDiffuseColor(Color.GRAY);
				box.material = gray
			}
		}
		this.base.translateX = base.pos.x
		this.base.translateY = base.pos.y
		this.base.translateZ = base.pos.z		
	}
	def registerUAV(uav : UAVBody){
		var box = drones.get(uav.nb)	
		box.translateX = uav.pos.x
		box.translateY = uav.pos.y
		box.translateZ = uav.pos.z
	}
	def registerSurvivor(survivor : Survivor) {
		var box = survivors.get(survivor.nb)
		box.translateX = survivor.pos.x
		box.translateY = survivor.pos.y
		box.translateZ = survivor.pos.z
	}
	def makeGround {
		var box1 = new Box

		box1.setWidth(300.0);
		box1.setHeight(300.0);
		box1.setDepth(1.0);

		box1.translateX = 0
		box1.translateY = 0
		box1.translateZ = 0

		box1.setDrawMode(DrawMode.FILL);
		var blueMaterial = new PhongMaterial();
		blueMaterial.setSpecularColor(Color.BLUE);
		blueMaterial.setDiffuseColor(Color.BLANCHEDALMOND);
		box1.material = blueMaterial
		return box1
	}
	def makeBase {
		var box1 = new Box
		box1.setWidth(20.0);
		box1.setHeight(20.0);
		box1.setDepth(20.0);
		box1.translateX = 0
		box1.translateY = 0
		box1.translateZ = 0
		box1.setDrawMode(DrawMode.FILL);
		var blueMaterial = new PhongMaterial();
		blueMaterial.setSpecularColor(Color.BLUE);
		blueMaterial.setDiffuseColor(Color.BLANCHEDALMOND);
		box1.material = blueMaterial
		this.base = box1
		grp.children.add(new Group(box1))
	}
	def makeDrones(nbDrones : int) {
		for (var i = 0; i < nbDrones; i++) {
			var box = new Sphere
			box.radius = 5
			box.translateX = 0
			box.translateY = 0
			box.translateZ = 0
			box.setDrawMode(DrawMode.FILL);
			var blueMaterial = new PhongMaterial();
			blueMaterial.setSpecularColor(Color.BLUE);
			blueMaterial.setDiffuseColor(Color.BLANCHEDALMOND);
			box.material = blueMaterial
			drones.add(box)
			var c = new Circle()
			c.centerXProperty.bind(box.translateXProperty)
			c.centerYProperty.bind(box.translateYProperty)
			c.radius = Utils.perceptRadius
			c.fill = Color.TRANSPARENT
			c.stroke = Color.GREENYELLOW
			grp.children.add(new Group(box,c))
		}
	}
	def makeSurvivors(nbSurvivors : int) {
		for (var i = 0; i < nbSurvivors; i++) {
			var box = new Sphere
			box.radius = 5
			box.translateX = 0
			box.translateY = 0
			box.translateZ = 0
			box.setDrawMode(DrawMode.FILL);
			var redMaterial = new PhongMaterial();
			redMaterial.setSpecularColor(Color.ORANGE);
			redMaterial.setDiffuseColor(Color.RED);
			box.material = redMaterial
			survivors.add(box)
			grp.children.add(new Group(box))
		}
	}
	def setCamera {
		scene = new Scene(grp, sceneX, sceneY);
		camera = new PerspectiveCamera;
		camera.farClip = 1000

		camera.translateX = -sceneX/2;
		camera.translateY = -sceneY/2;
		camera.translateZ = 200;
		// camera.rotationAxis = new Point3D(-1,0,0)
		// camera.rotate = 45
		// camera.rotationAxis = new Point3D(0, 1, 0)
		// camera.rotate = 180
		scene.setCamera(camera);
	}

}
