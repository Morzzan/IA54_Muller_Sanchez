/** 
 * 
 */
package model

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.concurrent.Semaphore
import view.Fx3DView
import io.sarl.core.AgentSpawned
import Agents.SurvivorAgent

/** 
 * @author morzzan
 */
agent EnvAgent {
	var fx : Fx3DView
	var step = 0
	val env = new Environment
	var nbuavs : int
	var nbSurvivors : int
	val actions = <GoThatWay> newArrayList
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	val sem = new Semaphore(1)

	on Initialize {
		info("The EnvAgent was started.")
		loggingName = "Env"
		nbuavs = occurrence.parameters.get(0) as Integer
		nbSurvivors = occurrence.parameters.get(1) as Integer
	}
	on StartEvent {
		info("Received Start event")
		fx = occurrence.fx
		for (var i = 0; i < nbSurvivors; i++) {
			spawn(typeof(SurvivorAgent), i)
		}
		for (var i = 0; i < nbuavs; i++) {
			spawn(typeof(UAVAgent), i,env.base)	
		}			
	}
	on RegisterEvent{
		if (occurrence.agentType == typeof(UAVAgent)) {			
			env.makeUAVBody(occurrence.source.UUID, occurrence.nb)
		}
		else {
			env.makeSurvivorBody(occurrence.source.UUID, occurrence.nb)
		}
		if(env.uavs.size >= nbuavs && env.survivors.size >= nbSurvivors){
			sendPercepts
		}
	}
	on GoThatWay{
		sem.acquire
		actions.add(occurrence)
		if(actions.size === nbuavs){
			sem.release
			in(50)[runstep]
		}
		else sem.release
	}
	on SurvivorSaved{
		env.saveSurvivor(occurrence.survivorID)
	}
	on Destroy{
		info("It took "+step+" steps to locate all the survivors in the zone")
		emit(new EndEvent)
	}
	
	def sendPercepts{
		for(uav : env.uavs.values){
			emit(new PerceptEvent(uav.pos, uav.speed ,env.getNeighbors(uav), env.isOnZone(uav)))[it.UUID == uav.id]
		}
		for(survivor : env.survivors.values){
			var seenUAVs = env.getSeenUAVs(survivor)
			if(!seenUAVs.empty) emit(new SurvivorPerceptEvent(seenUAVs,survivor.pos))[it.UUID == survivor.id]
		}
	}
	def runstep{		
		step++
		for(action : actions){
			var actorBody = env.uavs.get(action.source.UUID)
			actorBody.accelerate(action.direction)
		}
		for(uav : env.uavs.values){
			uav.move
		}
		fx.updateObjects(env.uavs.values,env.survivors.values)
		actions.clear
		if(nbSurvivors == env.nbRescuedSurvivors) killMe
		sendPercepts
	}	
}
