/** 
 * 
 */
package model

import com.vividsolutions.jts.geom.Coordinate
import com.vividsolutions.jts.geom.Geometry
import com.vividsolutions.jts.operation.distance.DistanceOp
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.concurrent.Semaphore
import skillscapacities.MoveCapacity
import skillscapacities.MoveSkill

/** 
 * @author morzzan
 * 
 */
agent UAVAgent {
	uses Logging, DefaultContextInteractions, Lifecycle, MoveCapacity
	var nb : int
	var base : Base
	var unexplored : Geometry
	val lock = new Semaphore(0)
	
	on Initialize {
		nb = occurrence.parameters.get(0) as Integer
		base = occurrence.parameters.get(1) as Base
		unexplored = occurrence.parameters.get(2) as Geometry
		setSkill(new MoveSkill,MoveCapacity)
		loggingName = " Drone " + nb.toString
		info("The UAV was started.")
		emit(new RegisterEvent(nb, typeof(UAVAgent)))
		lock.release
	}
	on PerceptEvent {
		addPercept(occurrence)
		updateUnexploredZone
		for (uav : occurrence.around) {
			lock.acquire
			emit(new ShareExploredZone(unexplored))[it.UUID == uav.id]
			lock.release
		}
		lock.acquire
		if(unexplored.area>0){
			lock.release
			moveTo(makeExplorationStrategy)
			}
		else {
			lock.release
			moveRandomly
			}
	}
	on ShareExploredZone {
		lock.acquire
		unexplored = unexplored.intersection(occurrence.zone)
		lock.release
	}
	on EndEvent{	
		killMe
	} 
	on HelpMe{
		emit(new SurvivorSaved(occurrence.source.UUID))
	}
	def updateUnexploredZone {
		val pos = currentPercept.pos 
		val myGeom = Utils.createCircle(Utils.perceptRadius,new Coordinate(pos.x,pos.y))
		lock.acquire
		unexplored = unexplored.difference(myGeom)	
		lock.release
	}
	def makeExplorationStrategy{
		val currentPercept = currentPercept
		var r : Vector3D
		try {
			lock.acquire
			val op = new DistanceOp(unexplored, Utils.createCircle(1, currentPercept.pos.add(currentPercept.speed).toPlaneCoordinate))			
			r = new Vector3D(op.nearestPoints.get(0))
			lock.release
		}catch(e : Exception){
			r = new Vector3D
		}
		return r
	}
}

