/** 
 * 
 */
package Environment

import com.vividsolutions.jts.geom.Geometry
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.io.PrintWriter
import java.util.concurrent.Semaphore
import tools.EndEvent
import tools.GoThatWay
import tools.PerceptEvent
import tools.RegisterEvent
import tools.StartEvent
import tools.SurvivorPerceptEvent
import tools.SurvivorSaved
import uav.UAVAgent
import view.Fx3DView
import base.Base
import base.BaseAgent
import survivor.SurvivorAgent

/** 
 * @author morzzan
 * Contains the basic behavior of the environment 
 */
 abstract behavior ManagingBehavior {
	protected var step = 0
	protected val env = new Environment(this.owner.ID)
	protected var nbuavs : int
	protected var nbSurvivors : int
	protected val actions = <GoThatWay>newArrayList
	protected val sem = new Semaphore(1)
	protected var fx : Fx3DView
	protected var writer : PrintWriter

	uses Logging, DefaultContextInteractions, Lifecycle

	on Initialize{
		nbuavs = occurrence.parameters.get(0) as Integer
		nbSurvivors = occurrence.parameters.get(1) as Integer
		try {
			writer = new PrintWriter("data.csv", "UTF-8")
			writer.println("step,nbSaved")
		} catch(e : Exception){}		
	}

	on StartEvent {
		info("Received Start event")
		fx = occurrence.fx
		env.base = new Base(spawn(typeof(BaseAgent), env.id))
		for (var i = 0; i < nbSurvivors; i++) {
			spawn(typeof(SurvivorAgent), i)
		}
		for (var i = 0; i < nbuavs; i++) {
			spawn(typeof(UAVAgent), i, env.base, env.zone as Geometry)
		}
	}

	on RegisterEvent {
		if (occurrence.agentType == typeof(UAVAgent)) {
			env.makeUAVBody(occurrence.source.UUID, occurrence.nb)
		} else {
			env.makeSurvivorBody(occurrence.source.UUID, occurrence.nb)
		}
		if (env.uavs.size >= nbuavs && env.survivors.size >= nbSurvivors) {
			sendPercepts
		}
	}
	
	on SurvivorSaved {
		info("Got the SurvivorSaved")
		for (survivor : occurrence.survivors) {
			env.saveSurvivor(survivor.id)
		}
	}

	on Destroy {
		info("It took " + step + " steps to locate all the survivors in the zone")
		emit(new EndEvent)
		writer.close
	}
	/**
	 * Sends the percepts to every UAV and survivor
	 */
	def sendPercepts {
		info("step "+ step)
		for (uav : env.uavs.values) {
			emit(new PerceptEvent(uav.pos, uav.speed, env.getNeighbors(uav), env.isOnZone(uav)))[it.UUID == uav.id]
		}
		for (survivor : env.survivors.values) {
			var seenUAVs = env.getSeenUAVs(survivor)
			if(!seenUAVs.empty) emit(new SurvivorPerceptEvent(seenUAVs, survivor))[it.UUID == survivor.id]
		}
	}
	/**
	 * saves a trace of this simulation step to allow further statistical studies
	 */
	def savestate{
		try {
			writer.println(step + "," + env.nbRescuedSurvivors)
		}
		catch(e : Exception){}
	}
	abstract def runstep
}
